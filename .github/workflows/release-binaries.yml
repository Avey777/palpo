# GitHub actions workflow which builds the release artifacts.

name: Release binary artifacts

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
    # branches: [main, next]
  merge_group:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

jobs:
  tag_name:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag.outputs.tag }}
    steps:
      - id: vars
        shell: bash
        run: echo "sha_short=${GITHUB_SHA::7}" | tee -a $GITHUB_OUTPUT

      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=manual-${GITHUB_SHA::7}" | tee -a $GITHUB_ENV

      # - if: github.event_name == 'schedule' || github.event_name == 'pull_request'
      #   run: echo 'TAG_NAME=nightly-${{ steps.vars.outputs.sha_short }}' | tee -a $GITHUB_ENV

      - if: github.event_name == 'push'
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" | tee -a $GITHUB_ENV

      - id: tag
        run: echo "tag=$TAG_NAME" | tee -a $GITHUB_OUTPUT

  linux:
    needs: tag_name
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest

          # - target: x86_64-unknown-linux-musl
          #   os: ubuntu-latest

          # - target: aarch64-unknown-linux-musl
          #   os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    env:
      RELEASE_TAG_NAME: ${{ needs.tag_name.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
      # - name: Build deb packages
      #   run: |
      #     docker buildx create --driver=docker-container --use
      #     docker buildx bake --pull ubuntu-focal-binary
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends libclang-dev libpq-dev cmake postgresql postgresql-contrib

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build and publish
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: palpo
          target: ${{ matrix.target }}
          token: ${{ secrets.GITHUB_TOKEN }}

  # macos:
  #   runs-on: macos-latest
  #   needs: tag_name
  #   env:
  #     RELEASE_TAG_NAME: ${{ needs.tag_name.outputs.tag_name }}

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: dtolnay/rust-toolchain@master
  #       with:
  #         toolchain: ${{ matrix.version }}
  #         components: rustfmt, clippy

  #     - name: Build
  #       run: cargo build --profile release

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: palpo-macos
  #         path: |
  #           ./target/release/macos/palpo
  #         retention-days: 3

  # windows:
  #   runs-on: windows-latest
  #   needs: tag_name
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       version:
  #         - stable
  #       target:
  #         - x86_64-pc-windows-msvc
  #   env:
  #     RELEASE_TAG_NAME: ${{ needs.tag_name.outputs.tag_name }}

  #   defaults:
  #     run:
  #       shell: bash

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: dtolnay/rust-toolchain@master
  #       with:
  #         toolchain: ${{ matrix.version }}
  #         components: rustfmt, clippy

  #     - name: Build
  #       run: cargo build --profile release

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: palpo-windows
  #         path: |
  #           ./palpo.exe
  #         retention-days: 1