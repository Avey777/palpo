# GitHub actions workflow which builds the release artifacts.

name: Build release artifacts

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
    branches: [main, next]
  merge_group:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

jobs:
  tag_name:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag.outputs.tag }}
    steps:
      - id: vars
        shell: bash
        run: echo "sha_short=${GITHUB_SHA::7}" | tee -a $GITHUB_OUTPUT

      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=manual-${GITHUB_SHA::7}" | tee -a $GITHUB_ENV

      # - if: github.event_name == 'schedule' || github.event_name == 'pull_request'
      #   run: echo 'TAG_NAME=nightly-${{ steps.vars.outputs.sha_short }}' | tee -a $GITHUB_ENV

      - if: github.event_name == 'push'
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" | tee -a $GITHUB_ENV

      - id: tag
        run: echo "tag=$TAG_NAME" | tee -a $GITHUB_OUTPUT

  linux:
    runs-on: ubuntu-latest
    needs: tag_name
    env:
      RELEASE_TAG_NAME: ${{ needs.tag_name.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
      # - name: Build deb packages
      #   run: |
      #     docker buildx create --driver=docker-container --use
      #     docker buildx bake --pull ubuntu-focal-binary
      - name: Install dependencies
        run: "sudo apt update && sudo apt install -y libpq-dev build-essential pkg-config"

      - name: Build
        run: cargo build --frozen --profile release

      - name: Gzip
        run: |
          mkdir palpo
          cp ./target/release/palpo palpo/
          tar -zcvf ./palpo-linux-amd64.tar.gz palpo

      - uses: actions/upload-artifact@v4
        with:
          name: palpo-linux
          path: |
            ./palpo-linux-*.tar.gz
          retention-days: 1

  # macos:
  #   runs-on: macos-latest
  #   needs: tag_name
  #   env:
  #     RELEASE_TAG_NAME: ${{ needs.tag_name.outputs.tag_name }}

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: dtolnay/rust-toolchain@master
  #       with:
  #         toolchain: ${{ matrix.version }}
  #         components: rustfmt, clippy

  #     - name: Build
  #       run: cargo build --frozen --profile release

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: palpo-macos
  #         path: |
  #           ./target/release/macos/palpo
  #         retention-days: 3

  # windows:
  #   runs-on: windows-latest
  #   needs: tag_name
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       version:
  #         - stable
  #       target:
  #         - x86_64-pc-windows-msvc
  #   env:
  #     RELEASE_TAG_NAME: ${{ needs.tag_name.outputs.tag_name }}

  #   defaults:
  #     run:
  #       shell: bash

  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: dtolnay/rust-toolchain@master
  #       with:
  #         toolchain: ${{ matrix.version }}
  #         components: rustfmt, clippy

  #     - name: Build
  #       run: cargo build --frozen --profile release

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: palpo-windows
  #         path: |
  #           ./palpo.exe
  #         retention-days: 1

  publish:
    needs:
      - linux
      # - windows
      # - macos
    runs-on: ubuntu-latest
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:
      # Must perform checkout first, since it deletes the target directory
      # before running, and would therefore delete the downloaded artifacts
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4

      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=manual-${GITHUB_SHA::7}" | tee -a $GITHUB_ENV

      # - if: github.event_name == 'schedule'
      #   run: echo 'TAG_NAME=nightly' | tee -a $GITHUB_ENV

      - if: github.event_name == 'push'
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" | tee -a $GITHUB_ENV

      # - if: env.TAG_NAME == 'nightly'
      #   run: |
      #     {
      #       echo 'SUBJECT=Palpo development build'
      #       echo 'PRERELEASE=--prerelease'
      #     } | tee -a $GITHUB_ENV

      # - if: env.TAG_NAME == 'nightly' && github.event_name != 'pull_request'
      #   name: Re-Tag nightly
      #   run: |
      #     gh release delete nightly --yes || true
      #     git push origin :nightly || true

      # - if: env.TAG_NAME != 'nightly'
      #   run: |
      #     {
      #       echo 'SUBJECT=Palpo release build'
      #       echo 'PRERELEASE='
      #     } | tee -a $GITHUB_ENV

      - name: Publish release
        if: github.event_name != 'pull_request'
        env:
          DEBUG: api
        run: |
          gh release create $TAG_NAME $PRERELEASE --title "$TAG_NAME" --target $GITHUB_SHA \
            palpo-linux/*
